(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{369:function(t,e,a){"use strict";a.r(e);var s=a(6),n=Object(s.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("p",[t._v("When it comes to templates there are two distinctive approaches. You have raw code, and template-syntax where there's no programing language but placeholders for limited programming functionality. Code below is a raw template, where you use a PHP file with explicit "),e("code",[t._v("<?php")]),t._v(" placeholders for PHP syntax, the primitive way to create templates.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[t._v("// greet.php\n\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),e("span",{pre:!0,attrs:{class:"token php language-php"}},[e("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$greet")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("?>")])]),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("Then there's template-syntax which appeared as an answer to how ugly and unsafe it gets to create raw templates. In this context, placeholders are used to define strings that will get replaced.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// greet.tpl")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("h1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" greet "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("h1"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),e("p",[t._v("In this post I explain what is wrong with these template systems and what I'm doing about it.")]),t._v(" "),e("h2",{attrs:{id:"templates-are-broken"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#templates-are-broken"}},[t._v("#")]),t._v(" Templates are broken")]),t._v(" "),e("p",[t._v("I get the idea of template files being "),e("em",[t._v("anon bytes")]),t._v(" of code that can be re-used. But I don't see why these need to be "),e("strong",[t._v("not scoped")]),t._v(" and "),e("strong",[t._v("not declare")]),t._v(" the variables it needs to handle. Templates are files "),e("strong",[t._v("without any signature")]),t._v(" on the variables required for the rendering, the only way to tell which variables are required is on runtime/compilation.")]),t._v(" "),e("p",[t._v("This brings a lot of issues:")]),t._v(" "),e("ul",[e("li",[t._v("Unrestricted access to data (raw templates).")]),t._v(" "),e("li",[t._v("Requires introspection to know which variables are required.")]),t._v(" "),e("li",[t._v("Can't tell if the template is missing a variable unless it panics.")]),t._v(" "),e("li",[t._v("Templates gets harder to test.")]),t._v(" "),e("li",[t._v("It makes to repeat yourself.")])]),t._v(" "),e("p",[t._v("The more relevant issue is that templates makes you to repeat yourself because of the "),e("strong",[t._v("unpredictable coupling")]),t._v(" between template and its replacements. If the template file change variables, the system that perform template parsing and the test to check the outcome must change.")]),t._v(" "),e("h3",{attrs:{id:"save-nil-on-your-ride"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#save-nil-on-your-ride"}},[t._v("#")]),t._v(" Save "),e("code",[t._v("<nil>")]),t._v(" on your ride")]),t._v(" "),e("p",[t._v("This error on Uber (reported by "),e("a",{attrs:{href:"https://twitter.com/ynorsk/status/1512746491261116419",target:"_blank",rel:"noopener noreferrer"}},[t._v("@ynorsk"),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://twitter.com/rogeriopvl/status/1512686156223328260",target:"_blank",rel:"noopener noreferrer"}},[t._v("@rogeriopvl"),e("OutboundLink")],1),t._v(", "),e("a",{attrs:{href:"https://twitter.com/delroth_/status/1512604223573315586",target:"_blank",rel:"noopener noreferrer"}},[t._v("@delroth_"),e("OutboundLink")],1),t._v(" and "),e("a",{attrs:{href:"https://mobile.twitter.com/ignacio_s/status/1512844950135664648",target:"_blank",rel:"noopener noreferrer"}},[t._v("@ignacio_s"),e("OutboundLink")],1),t._v(") is remarkable as users received a notification message that reads:")]),t._v(" "),e("div",{staticClass:"language-plain extra-class"},[e("pre",{pre:!0,attrs:{class:"language-plain"}},[e("code",[t._v("Ready to ride again? Save <nil>\n")])])]),e("p",[t._v("To get these "),e("em",[t._v("nil savings")]),t._v(" it means that someone forgot to check for the passed value and a null got fault-tolerant interpreted as "),e("code",[t._v("<nil>")]),t._v(". This can happen in any weak-typed system, not limited to just templates. I ignore how Uber handles the generation of that text, but it doesn't matter as the issue that should be troubling your head right now is how a company of the size and technological footprint as Uber can be affected by something like this where a simple "),e("code",[t._v("string")]),t._v(" type declaration would have prevent that text from being generated.")]),t._v(" "),e("h2",{attrs:{id:"introducing-danky"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#introducing-danky"}},[t._v("#")]),t._v(" Introducing Danky")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://chevere.org/packages/danky",target:"_blank",rel:"noopener noreferrer"}},[t._v("Danky"),e("OutboundLink")],1),t._v(" is a native typed template system for PHP. Contrary to all other template systems and engines, in Danky "),e("strong",[t._v("templates are classes")]),t._v(", which declare its scope and variables, adding language level context to templates.")]),t._v(" "),e("p",[t._v("Some benefits of using Danky:")]),t._v(" "),e("ul",[e("li",[t._v("Explicit scope, variables and types.")]),t._v(" "),e("li",[t._v("Static template wiring (linting, references, etc).")]),t._v(" "),e("li",[t._v("Easy re-factoring, one-click class renaming.")]),t._v(" "),e("li",[t._v("Templates become trivial to test.")])]),t._v(" "),e("p",[t._v("There's also a few caveats:")]),t._v(" "),e("ul",[e("li",[t._v("Requires auto-loading.")]),t._v(" "),e("li",[t._v("You have to write "),e("em",[t._v("a bit more")]),t._v(".")])]),t._v(" "),e("p",[t._v("The tradeoff is more than appealing. Sure, you have to organize your template in such fashion compatible with auto-loading, but as your other logic classes are already doing that is not that dramatic isn't? Also, you don't need to to learn a new syntax, Danky is just PHP code and the extra verbosity shouldn't really bother you.")]),t._v(" "),e("h3",{attrs:{id:"demo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#demo"}},[t._v("#")]),t._v(" Demo")]),t._v(" "),e("p",[t._v("ðŸ¦„ In Danky, templates "),e("strong",[t._v("explicit declare")]),t._v(" its scope.")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token php language-php"}},[e("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Quote.php")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("use")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token package"}},[t._v("Chevere"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Danky"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("Template")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name-definition class-name"}},[t._v("Quote")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Template")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[t._v("__construct")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword type-hint"}},[t._v("string")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword type-hint"}},[t._v("string")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$author")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$this")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),e("span",{pre:!0,attrs:{class:"token property"}},[t._v("render")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTML")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("quote"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),e("span",{pre:!0,attrs:{class:"token string double-quoted-string"}},[t._v('"'),e("span",{pre:!0,attrs:{class:"token interpolation"}},[e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$text")])]),t._v('"')]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),e("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$author")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("quote"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n            "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTML")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),e("p",[t._v("That "),e("code",[t._v("<<<HTML ...")]),t._v(" is "),e("a",{attrs:{href:"https://www.php.net/manual/en/language.types.string.php#language.types.string.syntax.heredoc",target:"_blank",rel:"noopener noreferrer"}},[t._v("Heredoc"),e("OutboundLink")],1),t._v(" syntax "),e("a",{attrs:{href:"https://www.php.net/manual/en/language.types.string.php",target:"_blank",rel:"noopener noreferrer"}},[t._v("string literal"),e("OutboundLink")],1),t._v(". In Danky, you use all the stuff that "),e("em",[t._v("has been always there")]),t._v(" to handle multi-line string literals. Heredoc is great for templates as it evaluates variables, making templates clean to read.")]),t._v(" "),e("p",[t._v("Templates must assign the "),e("code",[t._v("$render")]),t._v(" property, which accepts "),e("code",[t._v("string")]),t._v(" and "),e("code",[t._v("Template")]),t._v(" types. When needing to render the template is easy as:")]),t._v(" "),e("div",{staticClass:"language-php extra-class"},[e("pre",{pre:!0,attrs:{class:"language-php"}},[e("code",[e("span",{pre:!0,attrs:{class:"token php language-php"}},[e("span",{pre:!0,attrs:{class:"token delimiter important"}},[t._v("<?php")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("echo")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Quote")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token argument-name"}},[t._v("text")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Hello, world!'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token argument-name"}},[t._v("author")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string single-quoted-string"}},[t._v("'Rodolfo'")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),e("p",[t._v("Which echoes:")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("quote")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('"Hello, world!" --Rodolfo'),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("quote")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("ðŸ¥³ "),e("strong",[t._v("Congratulations")]),t._v("! You mastered Danky.")]),t._v(" "),e("h3",{attrs:{id:"name-meaning"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#name-meaning"}},[t._v("#")]),t._v(" Name meaning")]),t._v(" "),e("p",[t._v("The name and logo comes from a popular ice-cream sold in Chile, for the meaning refer to "),e("a",{attrs:{href:"https://www.urbandictionary.com/define.php?term=danky",target:"_blank",rel:"noopener noreferrer"}},[t._v("Urban Dictionary"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("h2",{attrs:{id:"get-danky"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get-danky"}},[t._v("#")]),t._v(" Get Danky")]),t._v(" "),e("p",[t._v("Danky is available through "),e("a",{attrs:{href:"https://packagist.org/packages/chevere/danky",target:"_blank",rel:"noopener noreferrer"}},[t._v("Packagist"),e("OutboundLink")],1),t._v(" and the repository source is at "),e("a",{attrs:{href:"https://github.com/chevere/danky",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("ðŸ‘‰ Check the "),e("a",{attrs:{href:"https://chevere.org/packages/danky",target:"_blank",rel:"noopener noreferrer"}},[t._v("documentation"),e("OutboundLink")],1),t._v(" to start using Danky today.")])])}),[],!1,null,null,null);e.default=n.exports}}]);